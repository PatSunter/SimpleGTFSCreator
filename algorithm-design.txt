
GTFS creator work steps:

 0) create the Agency ID etc (the basics)
 a) Create the Routes list (Read these in from e.g. a config, or shapefile ...)
 b) Create the Stops database (basically a name, location, and ID)

 c) Then we need to connect the Routes to Stops :- via both Trips, and Stoptimes 
    For each route:
     c1) Calculate starting time
     c2) Create a new Trip (linking route to a unique trip ID)
     c3) For each stop (in our original DB) along that route
         - Calculate time it will get there - prev stop time + distance / ave speed 
         - Create and enter a new stoptime object with those details. 

TODOs:-

Figure out details of manipulating times in Python properly to do service
times etc ... http://docs.python.org/2/library/datetime.html#time-objects

http://stackoverflow.com/questions/100210/python-easy-way-to-add-n-seconds-to-a-datetime-time

Also:- functionalise the Converting to GTFS index, etc ...

2013-11-04
----------

Work needed:
 D Ok - current state is that it can read in, and create a one-way schedule.
  So we need to create a two-way ability next ...

Then start improving the input side:-
 D Added ability to handle a set of different periods during the day
    with different headways/frequencies in each period.
    (N.B. haven't bothered to attempt to do this for different days of the
     week, weekend vs weekday - a level of realism that probably isn't a 
     high priority yet.)

 * Refactoring the config into a separate file.

 * Start trying to make the network-spec parts more "GIS-like" and per our
    definition.
    Note :- currently, the BZE network file doesn't have attributes for either
     actual distance of routes - OR average speed along them.
     So the Nemtools code calculates distance between stops from actual
     geometry of segments (I think point-point but not sure ...) and then 
     multiplies by one average speed per mode.
   
 * Practice with actually reading data from shapefiles 
   (See that network-reading script, and also the "geoprocessing with 
    Open Source GIS" online course.)

 * Is it worth looking at GTFSDB ??
   * And/or Aaron A's stuff first ?? 


Options for geospatial calculations / activities ...

 * pyproj
 * GDAL's OGR library (likely good for layers work, etc ... )
 * Shapely (good for working wigh geometry in 2D cartesian plane ...
 * postgis ??

www2.gsu.edu/~geohab/Babaie/courses/geol4123_6123/1_Lectures/0_Course%20PPTs/07_2_Python%20geospatial%20development.pptx
http://www.packtpub.com/article/geospatial-data-python-geometry

Import pyproj
lat1, long1 = (37. 37.775196, 122.419204809662)
lat2, long2 = (33.790348, -117.226085)
geod = pyproj.Geod (ellips =“WGS84”)	# WGS84 is a Datum
angle1, angle2, distance = geod.inv (long1, lat1, long2, lat2)
Print “Distance is %0.2f m” % distance

Distance is 2937.41 m 

(Looks like Herve mainly used PostGIS SQL calls directly ... but he 
  was calculating this directly ... )

/////

Good buffer distance for connecting route-line segments to stations:-
 * 0.0006 degrees (=~10m)

 From WP:- each degree at the equator represents 111,319.9 metres or approximately 111.32 km.

/////

Speeds:
 * Creating shapefile of ave speeds in SLAs (based on radial dist curve)
 * Ability to read this per line segment and calculate speed to use
    (eg via SLA polygon the segment primarily falls within)


Next for Pat:
 * Update GTFS creation script so it can read from actual Shapefiles 
    with relevant data.
 * (Test shapely etc for merging etc work).

2013-11-14
----------

Options for re-designing the script to work from shapefiles (and/or databases).

I think I should actually design a simple Python data structure to work
through :- then create this in an input stage.

That better encapsulates that aspect of the work so the output-oriented parts
don't need to change as much as a result of any design changes around input.

(It is effectively a simple 'relational DB' but based on Python tables ...)

Potential issues:-
 * Should I still create a "GTFS ID" as an added number to original route IDs?
 * It would kind of be nice if these matched closely between NEMTools and
   GTFS. Would be good to define a "Mode base value" and use this to 
   add to all routes/stops where possible to get unique IDs. 

